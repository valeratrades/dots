; general docs are at https://elkowar.github.io/eww/configuration.html
; currently sitting on:
; gc -b tray-3 https://github.com/ralismark/eww
; that's a version with tray support. Will have to switch to main when it is merged.
; pull request here: https://github.com/elkowar/eww/pull/743

(defvar bar_visible "true")
(defvar myopia "false")
(defvar todo_timer "None")
(defvar sway_mode "default")
(defvar cargo_compiling "false")
(defvar timer "")

;;TODO!: fix the thing with overlapping on myopia=true

(defwindow bar 
	:monitor 0
	:geometry (geometry :anchor "top right" :y 0 :width "0%" :height "17px")
	(box
		:class {myopia == "true" ? "myopia" : ""}
		:space-evenly false
		:visible {bar_visible == "true"}
		(sway_mode)
		(todo_timer)
		(cargo)
		(timer)
		(openvpn)
		(notifications)
		(github)
		(bluetooth)
		(microphone)
		(speaker)
		(ping)
		(ram)
		(cpu)
		(time)
		(battery)))

;; bar modules {{{
;; Sway Mode ;;
(defwidget sway_mode []
	(box
		:class "text"
		:visible {sway_mode != "default"}
		"#${sway_mode}"))

;; Timer 
(defwidget timer []
	(box
		:class "text"
		:visible {timer != ""}
		"|${timer}|"))


;; Todo Timer ;;
(defwidget todo_timer []
	(box
		:class "text"
		:class {substring(todo_timer,0,3) == "Out" ? "urgent" : substring(todo_timer,0,1) == "-" ? "problematic" : ""}
		:visible {todo_timer != "None"}
		"${todo_timer}"))

;; Cargo ;;
(defwidget cargo []
	(box
		:class "text"
		:class "problematic"
		:visible {cargo_compiling == "true"}
		""))

;; Openvpn ;;
(defpoll openvpn_poll :initial "0" :interval "1s" "./modules/openvpn.sh")
(defwidget openvpn []
  (box
		:class "text"
		:visible {openvpn_poll == "1"}
		" "))

;; Battery ;;
(defpoll battery_poll	:initial "{}" :interval "1s" "./modules/battery.sh")
(defwidget battery []
	(box
		:class "text"
		:class {battery_poll.content < 10 && battery_poll.icon != "" ? "urgent" : battery_poll.content < 10 && battery_poll.icon == "" ? "problematic" : ""}
		:visible {battery_poll.content < 99}
		"${battery_poll.icon}${battery_poll.content}"))

;; Time ;;
(defpoll time_poll :interval "1s" "date +\"%Y/%m/%d%a%H:%M:%S\"")
(defwidget time []
 (box
	:class "text"
	"${time_poll}"))

;; Bluetooth ;;
(defpoll bluetooth_connection :interval "2s" "./modules/bluetooth.sh")
(defwidget bluetooth []
	(box
		:class "text"
		:visible {bluetooth_connection != ""}
		"${bluetooth_connection}"))

;; System Utilization ;;
(defwidget cpu []
	(box
		:class "text"
		:class {"${round(EWW_CPU.avg, 0)}" > 90 ? "problematic" : ""}
		" ${round(EWW_CPU.avg, 0)}%"))
(defwidget ram []
	(box
		:visible {EWW_RAM.used_mem_perc != ""}
		"${round(EWW_RAM.used_mem_perc, 0)}%"))

;; Notifications ;;
(defpoll github_poll :initial "" :interval "1m" "./modules/github.sh")
(defwidget github []
	(box
		:class "text"
		:visible {github_poll != "" && github_poll != 0}
		"${github_poll}"))

(deflisten notifications_listen :initial '{"show": "no", "content": ""}' "./modules/notifications.sh")
(defwidget notifications []
	(box
		:class "text"
		:visible {notifications_listen.show == "yes"}
		{notifications_listen.content}))

;; Network ;;
(defpoll ping_poll :interval "10s" "./modules/ping.sh")
(defwidget ping []
	(box
		:class "text"
		:class {ping_poll > 100 || ping_poll == "None" ? "problematic" : ""}
		"${ping_poll == "None" ? "No WiFi" : ping_poll == "Some" ? "Some WiFi" : "${ping_poll}ms"}")) 

;; Volume ;;
(defpoll speaker_poll :initial "{}" :interval "1s" "./modules/speaker.sh")
(defwidget speaker []
	(box
		:class "text" 	
	 "${speaker_poll.icon} ${speaker_poll.content}"))

(defpoll microphone_poll :initial "{}" :interval "1s" "./modules/microphone.sh")
(defwidget microphone []
	(box
		:class "text"
		:class {microphone_poll.content <= 15 ? "problematic" : ""}
		"${microphone_poll.icon}${microphone_poll.content}"))
;; }}}

(defvar btc_line_main_str "")
(defvar btc_line_additional_str "")
(defvar btc_line_spy_str "")

(defwindow btc_line_upper
	:monitor 0
	:geometry (geometry :anchor "top right" :y 20 :width "0%" :height "14px")
	(box
		:class {myopia == "true" ? "myopia" : ""}
		:visible {bar_visible == "true" && btc_line_main_str != ""}
		:space-evenly false
		(box
			:class "text"
			btc_line_additional_str)
		;;TODO!: add border betwen these // can't do here, because the space is owned by the window. And if I create a new one for additional_line, how do I make it horiizontally stack with the main?
		(box
			:class "text"
			" ${btc_line_main_str}")))

(defwindow btc_line_lower
	:monitor 0
	:geometry (geometry :anchor "top right" :y 34 :width "0%" :height "14px")
	(box
		:class {myopia == "true" ? "myopia" : ""}
		:visible {bar_visible == "true" && btc_line_spy_str != ""}
		:class "text"
		btc_line_spy_str))
